/*! typestate - v1.0.0 - 2014-05-02
* https://github.com/eonarheim/TypeState
* Copyright (c) 2014 Erik Onarheim; Licensed BSD-2 Clause*/
var Transitions=function(){function t(t){this.fsm=t}return t.prototype.to=function(){for(var t=[],n=0;arguments.length-0>n;n++)t[n]=arguments[n+0];this.toStates=t,this.fsm.addTransitions(this)},t}(),TransitionFunction=function(){function t(t,n,i){this.fsm=t,this.from=n,this.to=i}return t}(),FiniteStateMachine=function(){function t(t){this._transitionFunctions=[],this._onCallbacks={},this._exitCallbacks={},this._enterCallbacks={},this.currentState=t,this._startState=t}return t.prototype.addTransitions=function(t){var n=this;t.fromStates.forEach(function(i){t.toStates.forEach(function(t){i===t||n._validTransition(i,t)||n._transitionFunctions.push(new TransitionFunction(n,i,t))})})},t.prototype.on=function(t,n){var i=""+t;return this._onCallbacks[i]||(this._onCallbacks[i]=[]),this._onCallbacks[i].push(n),this},t.prototype.onEnter=function(t,n){var i=""+t;return this._enterCallbacks[i]||(this._enterCallbacks[i]=[]),this._enterCallbacks[i].push(n),this},t.prototype.onExit=function(t,n){var i=""+t;return this._exitCallbacks[i]||(this._exitCallbacks[i]=[]),this._exitCallbacks[i].push(n),this},t.prototype.from=function(){for(var t=[],n=0;arguments.length-0>n;n++)t[n]=arguments[n+0];var i=new Transitions(this);return i.fromStates=t,i},t.prototype._validTransition=function(t,n){return this._transitionFunctions.some(function(i){return i.from===t&&i.to===n})},t.prototype.canGo=function(t){return this.currentState===t||this._validTransition(this.currentState,t)},t.prototype.go=function(t){if(!this.canGo(t))throw Error("Error no transition function exists from state "+(""+this.currentState)+" to "+(""+t));this._transitionTo(t)},t.prototype.reset=function(){this.currentState=this._startState},t.prototype._transitionTo=function(t){var n=this;this._exitCallbacks[""+this.currentState]||(this._exitCallbacks[""+this.currentState]=[]),this._enterCallbacks[""+t]||(this._enterCallbacks[""+t]=[]),this._onCallbacks[""+t]||(this._onCallbacks[""+t]=[]);var i=this._exitCallbacks[""+this.currentState].reduce(function(t,i){return t&&i.call(n)},!0),s=this._enterCallbacks[""+t].reduce(function(t,i){return t&&i.call(n)},!0);i&&s&&(this.currentState=t,this._onCallbacks[""+this.currentState].forEach(function(t){t.call(n)}))},t}();